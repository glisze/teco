#
# This makefile builds TECOC on a Sun running the SunOS operating system.
# Before running it,  inspect the lines between here and the line containing
# all #'s to select the way you want TECO-C built.

# If you want to compile with built-in debugging support,  uncomment the
# following line.  When debugging is compiled in,  the control-P command
# can be used to turn on function tracing or get views of internal data
# structures (see the DbgDsp function in tecoc.c). Compiling in this support
# makes TECO-C larger and a little slower,  so you should only use this
# when you're debugging TECO-C.

#DEBG = -DDEBUGGING

# If you're debugging TECO-C,  use this option to compile in a consistency
# checking function called after each command executes.  The function checks
# the sanity of TECO-C's internal variables.  This obviously slows things
# down a little.

#CCHEK = -DCONSISTENCY_CHECKING

# Include files for SunOS 4.0 are different than for 4.1 (4.1's are closer
# to the ANSI Standard).  Define OSVERS as -DSUNOS4_0 if you're running
# 4.0,  so functions get properly declared (and to keep gcc from bitching).

#OSVERS = -DSUNOS4_0

# To choose the compiler you want to use,  uncomment one of the following
# sets of lines (between here and the line containing all "#" characters).

# If you want to compile with video support,  uncomment the following lines,
# which use the System V compiler and compile/link using System V include
# files and libraries.  I've found that I get "undefined symbol" errors if I
# don't unsetenv the LD_LIBRARY_PATH environment variable before linking
# with this set of lines.
#
# Note that compiling in video support is a mixed blessing.  If you use
# TECO-C exclusively in video mode,  there are no problems.  If you turn
# video off (using a 0,7:w command) you'll notice that typeout is very slow.
# This is an artifact of curses.  To get fast typeout,  build TECO-C without
# video (use one of the other sets of lines below).

#CC = /usr/5bin/cc
#CFLAGS = ${OSVERS}${DEBG}${CCHEK} -DCURSES -O -pipe
#TERMOBJS = -lcurses

# If you want to the standard compiler,  uncomment the following line.

# CFLAGS = $(OSVERS) ${DEBG} ${CCHEK} -O -pipe
# TERMOBJS = -ltermcap

# If you want to use gcc,  uncomment the following lines,  which override the
# COMPILE.c macro so it doesn't stick in the -target option, which gcc
# doesn't understand.

CC= gcc
CFLAGS= ${OSVERS} ${DEBG} ${CCHEK} -DCURSES -O -Wall -Wshadow -Wpointer-arith -Wcast-qual
# CFLAGS= ${OSVERS} ${DEBG} ${CCHEK} -DCURSES -static -O -Wall -Wshadow -Wpointer-arith -Wcast-qual
#TERMOBJS = -ltermcap
TERMOBJS = `pkg-config --libs ncurses`
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) -c -g

#############################################################################

CFILES=	baksrc.c bldstr.c clenup.c cmatch.c docjr.c doeves.c doflag.c \
	echoit.c err.c exea.c exeats.c exeb.c exebar.c exebsl.c exec.c \
	execcc.c execln.c execom.c execrt.c execst.c execta.c exectc.c \
	exectd.c execte.c execti.c exectl.c exectn.c execto.c exectp.c \
	exectq.c exectr.c exects.c exectt.c exectu.c exectv.c exectw.c \
	exectx.c execty.c exectz.c exed.c exedgt.c exedot.c exedqu.c \
	exee.c exeequ.c exeesc.c exeexc.c exeey.c exef.c exefb.c exeg.c \
	exegtr.c exeh.c exei.c exeill.c exej.c exek.c exel.c exelbr.c \
	exelst.c exem.c exen.c exenul.c exenyi.c exeo.c exeopr.c exep.c \
	exeprc.c exepw.c exeq.c exeqes.c exer.c exerbr.c exertp.c exes.c \
	exescl.c exet.c exeu.c exeund.c exeusc.c exev.c exew.c exex.c \
	exey.c exez.c findes.c findqr.c flowec.c flowee.c flowel.c \
	getara.c getnma.c inccbp.c init.c insstr.c isradx.c ln2chr.c \
	makdbf.c makrom.c popmac.c pshmac.c pushex.c rdline.c rdpage.c \
	readcs.c replac.c search.c singlp.c skpcmd.c srclop.c sserch.c \
	tabort.c typbuf.c typest.c uminus.c wrpage.c zfrsrc.c zunix.c

OBJECTS= $(CFILES:.c=.o)

tecoc: tecoc.o ${OBJECTS}
	${LINK.c} -s -o $@ tecoc.o ${OBJECTS} ${TERMOBJS}

tecoc.o: tecoc.c zport.h tecoc.h deferr.h dchars.h chmacs.h

clpars.h: genclp clpars.tec
	genclp

genclp: genclp.o
	${LINK.c} -o $@ genclp.o

genclp.o: genclp.c

clean:
	@for i in makedep? ${OBJECTS} ; do \
		if [ -f $$i ] ; then rm $$i ; fi ; \
	done
	rm -f tecoc tecoc.o core

tags:
	etags *.c *.h

lint:
# b = report unreachable break statements
# c = complain about casts with questionable portability
# h = apply heuristic tests
# x = report unused externs
	lint -bchx -DSUNOS4_0 tecoc.c ${CFILES}


#
#  Invoking this target (with "make depend") causes a new version of this
#  file to be created.  This current version will be saved in a file named
#  "makefile.bak".  In the new file, the lines following the special "DO NOT
#  DELETE" line will be replaced with a new set of dependency rules.
#

depend: makedep
	@echo '/^# DO NOT DELETE THIS LINE/+1,$$d' >makedep0
	@echo '$$r makedep5' >>makedep0
	@echo 'w' >>makedep0
	@cp makefile makefile.bak
	@ed - makefile < makedep0
	@rm makedep?
	@echo "new version of makefile generated, old version in makefile.bak"

makedep: FRC
	@cat /dev/null >makedep5
	@echo "generating include file dependency list..."
	@-(for i in ${CFILES} ; do \
		${CPP} -M $$i >> makedep1; done) 2>makedepe
	@echo "generating new version of makefile..."
	@sed -e 's|: ./|: |' makedep1 > makedep2
	@awk ' { if ($$1 != prev)                              \
			{ print rec; rec = $$0; prev = $$1; }  \
		   else                                        \
			{ if (length(rec $$2) > 70)            \
				{ print rec; rec = $$0; }      \
			  else                                 \
				rec = rec " " $$2              \
			}                                      \
	       }                                               \
	       END { print rec }                               \
	     '                                                 \
	     makedep2 >makedep3
	@awk '/:/ {printf "%s\n", $$0}' \
	     makedep3 >makedep4
	@sed -e 's|:|:|' makedep4 > makedep5
	@cat makedepe
	@(if [ -s makedepe ]; then false; fi)
FRC:


